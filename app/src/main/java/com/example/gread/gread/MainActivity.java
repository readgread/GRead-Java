package com.example.gread.gread;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Typeface;import android.os.Bundle;import android.os.StrictMode;import android.support.annotation.NonNull;import android.support.v4.app.FragmentActivity;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.TextView;import com.facebook.drawee.backends.pipeline.Fresco;import com.google.android.gms.auth.api.Auth;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;import com.google.android.gms.auth.api.signin.GoogleSignInResult;import com.google.android.gms.common.SignInButton;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.AuthCredential;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.auth.GoogleAuthProvider;public class MainActivity extends FragmentActivity{    TextView logo, caption;    private static final int RC_SIGN_IN = 9001;    public static final String USER_PREFS_NAME = "User Information";    private FirebaseAuth mauth;    private FirebaseAuth.AuthStateListener mAuthListener;    private GoogleApiClient googleApiClient;    protected void onCreate(Bundle savedInstanceState)    {        super.onCreate(savedInstanceState);        Fresco.initialize(this);        requestWindowFeature(Window.FEATURE_NO_TITLE);        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();        StrictMode.setThreadPolicy(policy);        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,                WindowManager.LayoutParams.FLAG_FULLSCREEN);        setContentView(R.layout.activity_main);        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)                .requestIdToken(getString(R.string.server_client_id))                .requestEmail()                .build();        googleApiClient = new GoogleApiClient.Builder(this)                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)                .build();        mauth = FirebaseAuth.getInstance();        mAuthListener = new FirebaseAuth.AuthStateListener() {            @Override            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {                FirebaseUser user_google = firebaseAuth.getCurrentUser();                if(user_google != null)                {                    SharedPreferences.Editor userInfo = getSharedPreferences(USER_PREFS_NAME, MODE_PRIVATE).edit();                    userInfo.putString("DisplayName", user_google.getDisplayName());                    userInfo.putString("Email", user_google.getEmail());                    userInfo.putString("PhotoURL", String.valueOf(user_google.getPhotoUrl()));                    userInfo.commit();                    Intent loggedin = new Intent(MainActivity.this, HomeActivity.class);                    startActivity(loggedin);                }            }        };            logo=(TextView)findViewById(R.id.logo_gread);            caption=(TextView)findViewById(R.id.caption_text);            Typeface face= Typeface.createFromAsset(getAssets(), "fonts/Meltix.otf");            logo.setTypeface(face);            Typeface face1= Typeface.createFromAsset(getAssets(), "fonts/Port.ttf");            caption.setTypeface(face1);        SignInButton google_button = (SignInButton) findViewById(R.id.sign_in_button);        google_button.setSize(SignInButton.SIZE_WIDE);        google_button.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(googleApiClient);                startActivityForResult(signInIntent, RC_SIGN_IN);            }        });        }    @Override    protected void onStart() {        super.onStart();        mauth.addAuthStateListener(mAuthListener);    }    @Override    protected void onStop() {        super.onStop();        if(mAuthListener != null)            mauth.removeAuthStateListener(mAuthListener);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if(requestCode == RC_SIGN_IN){            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);            if(result.isSuccess()){                GoogleSignInAccount account = result.getSignInAccount();                firebaseAuthWithGoogle(account);            }        }    }    private void firebaseAuthWithGoogle(GoogleSignInAccount account){        String id = account.getIdToken();        AuthCredential credential = GoogleAuthProvider.getCredential(account.getIdToken(), null);        mauth.signInWithCredential(credential)                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {                    @Override                    public void onComplete(@NonNull Task<AuthResult> task) {                    }                });    }}